#Initialize sp
addi sp, zero, 0x1130

#Argument
addi v0, zero, 4
addi t1, zero, sum 

#begin
callr t1
print:
stw a0, 0x2000(zero)
break

sum:
addi sp, sp, -8

#Push argument and address from where function was called
stw v0, 0(sp)
stw ra, 4(sp)

bne v0, zero, rec #if(t0 != zero) jmp to rec

#base case
addi v0, zero, 0
addi sp, sp, 8

#begin going up the stack 
ret ra 

#decrement arg and recursive call
rec:	addi v0, v0, -1 
rcall: callr t1 #stores next pc in ra

#return pos when going up the stack
ldw v0, 0(sp)#Pop value and address stored in stack
ldw ra, 4(sp)
add a0, a0, v0
addi sp, sp, 8	
#go to previous call with new a0
ret ra
